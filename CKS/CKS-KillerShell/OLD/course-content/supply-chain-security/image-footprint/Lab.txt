Lab 1: Container Image Footprint User

Ex1: Run the default Dockerfile

There is a given Dockerfile under /opt/ks/Dockerfile .

Using Docker:

Build an image named base-image from the Dockerfile.
Run a container named c1 from that image.
Check under which user the sleep process is running inside the container

Solution:

controlplane $ cat /opt/ks/Dockerfile
FROM alpine:3.12.3

RUN adduser -D -g '' appuser

CMD sh -c 'sleep 1d'



Build and run

cd /opt/ks/
docker build -t base-image .
docker run --name c1 -d base-image

Show the user of processes

controlplane $ docker exec c1 ps
PID   USER     TIME  COMMAND
    1 root      0:00 sleep 1d
    6 root      0:00 ps

(to start again) Delete container

docker rm c1 --force


Ex2: Run container as user
Modify the Dockerfile /opt/ks/Dockerfile to run processes as user appuser
Update the image base-image with your change
Build a new container c2 from that image


Add the USER docker command:

FROM alpine:3.12.3
RUN adduser -D -g '' appuser
USER appuser
CMD sh -c 'sleep 1d'

Build and run:

cd /opt/ks/
docker build -t base-image .
docker run --name c2 -d base-image

Show the user of processes

controlplane $ docker exec c2 ps
PID   USER     TIME  COMMAND
    1 appuser   0:00 sleep 1d
    6 appuser   0:00 ps

(to start again) Delete container

docker rm c2 --force

###############

Lab 2: Container Hardening
Harden a given Docker Container
There is a Dockerfile at /root/image/Dockerfile .

It’s a simple container which tries to make a curl call to an imaginary api with a secret token, the call will 404 , but that's okay.

Use specific version 20.04 for the base image
Remove layer caching issues with apt-get
Remove the hardcoded secret value 2e064aad-3a90–4cde-ad86–16fad1f8943e . The secret value should be passed into the container during runtime as env variable TOKEN
Make it impossible to podman exec , docker exec or kubectl exec into the container using bash
You can build the image using

cd /root/image
podman build .

controlplane $ cat /root/image/Dockerfile
FROM ubuntu
RUN apt-get update
RUN apt-get -y install curl
ENV URL https://google.com/this-will-fail?secret-token=
CMD ["sh", "-c", "curl --head $URL=2e064aad-3a90-4cde-ad86-16fad1f8943e"]



Solution 1

Specific Versions


FROM ubuntu:20.04
RUN apt-get update
RUN apt-get -y install curl
ENV URL https://google.com/this-will-fail?secret-token=
CMD ["sh", "-c", "curl --head $URL$TOKEN"]

Solution 2

Layer Caching


FROM ubuntu:20.04
RUN apt-get update && apt-get -y install curl
ENV URL https://google.com/this-will-fail?secret-token=
CMD ["sh", "-c", "curl --head $URL$TOKEN"]

Every RUN line creates a new image layer. If update and install are in different lines it could be that the update-layer is outdated. More about this here.


Solution 3

Secret as runtime Env variable


FROM ubuntu:20.04
RUN apt-get update && apt-get -y install curl
ENV URL https://google.com/this-will-fail?secret-token=
CMD ["sh", "-c", "curl --head $URL$TOKEN"]

Then to run:


podman build -t app .

podman run -e TOKEN=2e064aad-3a90-4cde-ad86-16fad1f8943e app

Solution 4

Prevent Bash Exec
   

(Instead of removing binaries it might be even better to start from a scratch container, only adding those binaries needed to run your app)


FROM ubuntu:20.04
RUN apt-get update && apt-get -y install curl
ENV URL https://google.com/this-will-fail?secret-token=
RUN rm /usr/bin/bash
CMD ["sh", "-c", "curl --head $URL$TOKEN"]

Test it:

cd /root/image/
podman build -t app .
podman run -d -e TOKEN=2e064aad-3a90-4cde-ad86-16fad1f8943e app sleep 1d # run in background
podman ps | grep app
podman exec -it 4a848daec2e2 bash # fails
podman exec -it 4a848daec2e2 sh # work

clear
